{
  "name": "coffee-react-transform",
  "description": "React JSX support for Coffeescript",
  "keywords": [
    "coffeescript",
    "react",
    "jsx",
    "cjsx",
    "coffee-react"
  ],
  "author": {
    "name": "James Friend"
  },
  "version": "0.5.2",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/jsdf/coffee-react-transform/master/LICENSE"
    }
  ],
  "scripts": {
    "test": "cake test",
    "prepublish": "cake build"
  },
  "files": [
    "index.js",
    "lib/",
    "bin/"
  ],
  "bin": {
    "cjsx-transform": "./bin/cjsx-transform",
    "csx-transform": "./bin/csx-transform"
  },
  "homepage": "https://github.com/jsdf/coffee-react-transform",
  "bugs": {
    "url": "https://github.com/jsdf/coffee-react-transform/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jsdf/coffee-react-transform.git"
  },
  "devDependencies": {
    "coffee-script": "^1.7.1"
  },
  "readme": "# Coffeescript React JSX Transformer\n\nProvides support for an equivalent of JSX syntax in Coffeescript (called CJSX) so you can write your Facebook React components with the full awesomeness of Coffeescript.\n\n#### Example\n\ncar-component.coffee\n\n```coffee\n# @cjsx React.DOM\nCar = React.createClass\n  render: ->\n    <Vehicle doors={4} locked={isLocked()}  data-colour=\"red\" on>\n      <Parts.FrontSeat />\n      <Parts.BackSeat />\n      <p className=\"kickin\">Which seat can I take? {@props?.seat or 'none'}</p>\n    </Vehicle>\n```\n\ntransform\n\n```bash\ncjsx-transform car-component.coffee\n```\n\noutput\n\n```coffee\n\nCar = React.createClass\n  render: ->\n    Vehicle({\"doors\": (4), \"locked\": (isLocked()), \"data-colour\": \"red\", \"on\": true},\n      Parts.FrontSeat(null),\n      Parts.BackSeat(null),\n      React.DOM.p({className: \"kickin\"}, \"Which seat can I take? \", (@props?.seat or 'none'))\n    )\n```\n\n### Try it out\nThe [try coffee-react](http://jsdf.github.io/coffee-react-transform/) tool is available to test out some CJSX code and see the CoffeeScript it transforms into.\n\n### Getting Started\n`coffee-react-transform` simply handles preprocessing Coffeescript with JSX-style markup into valid Coffeescript. Instead of using it directly, you may want to make use of one of these more high-level tools:\n- [coffee-react](https://github.com/jsdf/coffee-react): a drop-in replacement for the `coffee` executable, for compiling CJSX.\n- [node-cjsx](https://github.com/SimonDegraeve/node-cjsx): `require` CJSX files on the server (also possible with [coffee-react/register](https://github.com/jsdf/coffee-react)).\n- [coffee-reactify](https://github.com/jsdf/coffee-reactify): bundle CJSX files via [browserify](https://github.com/substack/node-browserify), see also [cjsxify](https://github.com/SimonDegraeve/cjsxify).  \n- [react-coffee-quickstart](https://github.com/SimonDegraeve/react-coffee-quickstart): equivalent to [react-quickstart](https://github.com/andreypopp/react-quickstart).\n- [sprockets preprocessor](https://github.com/jsdf/sprockets-coffee-react): use CJSX with Rails/Sprockets\n- [ruby coffee-react gem](https://github.com/jsdf/ruby-coffee-react) for general ruby integration\n- [vim plugin](https://github.com/mtscout6/vim-cjsx) for syntax highlighting\n- [sublime text package](https://github.com/reactjs/sublime-react/) for syntax highlighting\n- [mimosa plugin](https://github.com/mtscout6/mimosa-cjsx) for the mimosa build tool\n- [karma preprocessor](https://github.com/mtscout6/karma-cjsx-preprocessor) for karma test runner\n\n### CLI\n\n```bash\ncjsx-transform [input file]\n```\nOutputs Coffeescript code to stdout. Redirect it to a file or straight to the Coffeescript compiler, eg.\n```bash\ncjsx-transform examples/car.coffee | coffee -cs > car.js\n```\n\n### API\n```coffee\ntransform = require 'coffee-react-transform'\n\ntransformed = transform('...some CJSX code...')\n```\n\n### Installation\nFrom [npm](https://www.npmjs.org/):\n```bash\nnpm install -g coffee-react-transform\n```\n\n#### UMD bundle for the browser\nIf you want to use coffee-react-transform in the browser or under ExecJS or some other environment that doesn't support CommonJS modules, you can use this build provided by [BrowserifyCDN](wzrd.in), which will work as an AMD module or just a plain old script tag:\n\n[http://wzrd.in/standalone/coffee-react-transform](http://wzrd.in/standalone/coffee-react-transform)\n\n```html\n<script src=\"http://wzrd.in/standalone/coffee-react-transform\"></script>\n<script>\n  coffeeReactTransform('-> <a />');\n  // returns \"-> React.DOM.a(null)\"\n</script>\n```\n\n### Spread attributes\nA recent addition to JSX (and CJSX) is 'spread attributes' which allow merging an object of props into a component, eg:\n```coffee\nextraProps = color: 'red', speed: 'fast'\n<div color=\"blue\" {... extraProps} />\n```\nwhich is transformed to:\n```coffee\nextraProps = color: 'red', speed: 'fast'\nReact.DOM.div(Object.assign({\"color\": \"blue\"},  extraProps)\n```\nIf you use this syntax in your code, be sure to include a shim for `Object.assign` for browsers/environments which don't yet support it (basically all of them).\n[es6-shim](https://github.com/es-shims/es6-shim) and [object.assign](https://www.npmjs.org/package/object.assign) are two possible choices.\n\n### Tests\n\n`cake test` or `cake watch:test`\n\n#### Note about the .cjsx file extension\nThe custom file extension recently changed from `.csx` to `.cjsx` to avoid conflicting with an existing C# related file extension, so be sure to update your files accordingly (including changing the pragma to  `@cjsx`). You can also just use `.coffee` as the file extension. Backwards compatibility will be maintained until the next major version.\n",
  "readmeFilename": "README.md",
  "_id": "coffee-react-transform@0.5.2",
  "_from": "coffee-react-transform@^0.5.0"
}
